
DFA n8:
----------------------------------------
states = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
sigma = {'a', 'b'}
start = 0
finals = {3, 4, 8, 9}
delta = {
    (0, 'a') : 1
    (0, 'b') : 9
    (1, 'a') : 8
    (1, 'b') : 2
    (2, 'a') : 3
    (2, 'b') : 2
    (3, 'a') : 2
    (3, 'b') : 4
    (4, 'a') : 5
    (4, 'b') : 8
    (5, 'a') : 4
    (5, 'b') : 5
    (6, 'a') : 7
    (6, 'b') : 5
    (7, 'a') : 6
    (7, 'b') : 5
    (8, 'a') : 1
    (8, 'b') : 3
    (9, 'a') : 7
    (9, 'b') : 8
}
----------------------------------------

About to minimize n8 (method 1: L&P)
First partitioning:
 (0, 1, 2, 5, 6, 7) (3, 4, 8, 9)
Next partitioning:
 (0,) (1, 2, 5) (3, 4, 8, 9) (6, 7)
Next partitioning:
 (0,) (1, 2, 5) (3, 4, 8) (6, 7) (9,)
Final partitioning:
 (0,) (1, 2, 5) (3, 4, 8) (6, 7) (9,)

Minimized n8: (method 1: L&P)
----------------------------------------
states = {(0,), (1, 2, 5), (3, 4, 8), (6, 7), (9,)}
sigma = {'a', 'b'}
start = (0,)
finals = {(3, 4, 8), (9,)}
delta = {
    ((0,), 'a') : (1, 2, 5)
    ((0,), 'b') : (9,)
    ((1, 2, 5), 'a') : (3, 4, 8)
    ((1, 2, 5), 'b') : (1, 2, 5)
    ((3, 4, 8), 'a') : (1, 2, 5)
    ((3, 4, 8), 'b') : (3, 4, 8)
    ((6, 7), 'a') : (6, 7)
    ((6, 7), 'b') : (1, 2, 5)
    ((9,), 'a') : (6, 7)
    ((9,), 'b') : (3, 4, 8)
}
----------------------------------------

About to Minimize n8 (method 2: marking algo)
|1_0_
 0|2_1_
 0 0|3_2_
 1 1 1|4_3_
 1 1 1 0|5_4_
 0 0 0 1 1|6_5_
 0 0 0 1 1 0|7_6_
 0 0 0 1 1 0 0|8_7_
 1 1 1 0 0 1 1 1|9_8_
 1 1 1 0 0 1 1 1 0|10_9_
|1_0_
 2|2_1_
 2 0|3_2_
 1 1 1|4_3_
 1 1 1 0|5_4_
 2 0 0 1 1|6_5_
 2 2 2 1 1 2|7_6_
 2 2 2 1 1 2 0|8_7_
 1 1 1 0 0 1 1 1|9_8_
 1 1 1 2 0 1 1 1 2|10_9_
|1_0_
 2|2_1_
 2 0|3_2_
 1 1 1|4_3_
 1 1 1 0|5_4_
 2 0 0 1 1|6_5_
 2 2 2 1 1 2|7_6_
 2 2 2 1 1 2 0|8_7_
 1 1 1 0 0 1 1 1|9_8_
 1 1 1 2 3 1 1 1 2|10_9_
plist:
[(0,), (1, 2, 5), (3, 4, 8), (6, 7), (9,)]

Minimized n8: (method 2: marking algo)
----------------------------------------
states = {(0,), (1, 2, 5), (3, 4, 8), (6, 7), (9,)}
sigma = {'a', 'b'}
start = (0,)
finals = {(3, 4, 8), (9,)}
delta = {
    ((0,), 'a') : (1, 2, 5)
    ((0,), 'b') : (9,)
    ((1, 2, 5), 'a') : (3, 4, 8)
    ((1, 2, 5), 'b') : (1, 2, 5)
    ((3, 4, 8), 'a') : (1, 2, 5)
    ((3, 4, 8), 'b') : (3, 4, 8)
    ((6, 7), 'a') : (6, 7)
    ((6, 7), 'b') : (1, 2, 5)
    ((9,), 'a') : (6, 7)
    ((9,), 'b') : (3, 4, 8)
}
----------------------------------------
min1_n8.equiv(min2_n8) is True
